name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}  # Unique image tag based on the commit SHA
      run: |
        # Build the Docker image and tag it with the commit SHA
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        
        # Push the Docker image to ECR with the tag
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS Credentials for kubectl
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1

    - name: Deploy to Kubernetes
      run: |
        # Decode and configure kubectl from GitHub Secrets
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update the deployment with the new image using the commit SHA tag
        kubectl set image deployment/node-app-deployment node-app=$REGISTRY/$REPOSITORY:${{ github.sha }} -n default
        
        # Wait for the deployment to roll out successfully
        kubectl rollout status deployment/node-app-deployment -n default